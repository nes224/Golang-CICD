name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: golang-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

  deploy:
      name: Deploy to AWS EC2
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Copy SSH key
          run: |
            mkdir -p ~/.ssh
            echo "$(echo "${{ vars.SSH_PRIVATE_KEY_DEV }}")" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
        - name : Debug SSH Key
          run: |
            echo "SSH KEY contents: $(cat ~/.ssh/id_rsa)" 
        
        - name: Deploy to EC2
          run: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_INSTANCE }} << EOF
            mkdir -p /home/ec2-user/golang-app
            cd /home/ec2-user/golang-app
            ${{ secrets.LOGIN_AWS_ECR }}
            docker pull ${{ secrets.URL }}:latest
            docker run -d -p 8000:8000 --name golang-app-container ${{secrets.URL}}
            EOF
